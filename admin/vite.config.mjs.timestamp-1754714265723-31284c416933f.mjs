// vite.config.mjs
import { defineConfig } from "file:///D:/git-test/uploading-test/admin/node_modules/vite/dist/node/index.js";
import react from "file:///D:/git-test/uploading-test/admin/node_modules/@vitejs/plugin-react/dist/index.mjs";
import path from "node:path";
import autoprefixer from "file:///D:/git-test/uploading-test/admin/node_modules/autoprefixer/lib/autoprefixer.js";
var __vite_injected_original_dirname = "D:\\git-test\\uploading-test\\admin";
var vite_config_default = defineConfig(() => {
  return {
    base: "/admin/",
    // Important for correct path resolution
    build: {
      outDir: "build"
    },
    css: {
      postcss: {
        plugins: [autoprefixer({})]
      },
      preprocessorOptions: {
        scss: {
          quietDeps: true,
          silenceDeprecations: ["import", "legacy-js-api"]
        }
      }
    },
    esbuild: {
      loader: "jsx",
      include: /src\/.*\.jsx?$/,
      exclude: []
    },
    optimizeDeps: {
      force: true,
      esbuildOptions: {
        loader: {
          ".js": "jsx"
        }
      }
    },
    plugins: [react()],
    resolve: {
      alias: [
        {
          find: "src/",
          replacement: `${path.resolve(__vite_injected_original_dirname, "src")}/`
        }
      ],
      extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json", ".scss"]
    },
    server: {
      port: 3e3,
      host: "0.0.0.0",
      // Allows external access
      strictPort: true,
      // Ensures it runs on port 3000
      cors: {
        origin: ["https://test1.3ding.in"],
        // Use HTTPS
        credentials: true
      },
      proxy: {},
      allowedHosts: ["test1.3ding.in"]
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubWpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxcZ2l0LXRlc3RcXFxcdXBsb2FkaW5nLXRlc3RcXFxcYWRtaW5cIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkQ6XFxcXGdpdC10ZXN0XFxcXHVwbG9hZGluZy10ZXN0XFxcXGFkbWluXFxcXHZpdGUuY29uZmlnLm1qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRDovZ2l0LXRlc3QvdXBsb2FkaW5nLXRlc3QvYWRtaW4vdml0ZS5jb25maWcubWpzXCI7Ly8gaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSdcbi8vIGltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCdcbi8vIGltcG9ydCBwYXRoIGZyb20gJ25vZGU6cGF0aCdcbi8vIGltcG9ydCBhdXRvcHJlZml4ZXIgZnJvbSAnYXV0b3ByZWZpeGVyJ1xuXG4vLyBleHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKCkgPT4ge1xuLy8gICByZXR1cm4ge1xuLy8gICAgIGJhc2U6ICcuLycsXG4vLyAgICAgYnVpbGQ6IHtcbi8vICAgICAgIG91dERpcjogJ2J1aWxkJyxcbi8vICAgICB9LFxuLy8gICAgIGNzczoge1xuLy8gICAgICAgcG9zdGNzczoge1xuLy8gICAgICAgICBwbHVnaW5zOiBbXG4vLyAgICAgICAgICAgYXV0b3ByZWZpeGVyKHt9KSwgLy8gYWRkIG9wdGlvbnMgaWYgbmVlZGVkXG4vLyAgICAgICAgIF0sXG4vLyAgICAgICB9LFxuLy8gICAgICAgcHJlcHJvY2Vzc29yT3B0aW9uczoge1xuLy8gICAgICAgICBzY3NzOiB7XG4vLyAgICAgICAgICAgcXVpZXREZXBzOiB0cnVlLFxuLy8gICAgICAgICAgIHNpbGVuY2VEZXByZWNhdGlvbnM6IFsnaW1wb3J0JywgJ2xlZ2FjeS1qcy1hcGknXSxcbi8vICAgICAgICAgfSxcbi8vICAgICAgIH0sXG4vLyAgICAgfSxcbi8vICAgICBlc2J1aWxkOiB7XG4vLyAgICAgICBsb2FkZXI6ICdqc3gnLFxuLy8gICAgICAgaW5jbHVkZTogL3NyY1xcLy4qXFwuanN4PyQvLFxuLy8gICAgICAgZXhjbHVkZTogW10sXG4vLyAgICAgfSxcbi8vICAgICBvcHRpbWl6ZURlcHM6IHtcbi8vICAgICAgIGZvcmNlOiB0cnVlLFxuLy8gICAgICAgZXNidWlsZE9wdGlvbnM6IHtcbi8vICAgICAgICAgbG9hZGVyOiB7XG4vLyAgICAgICAgICAgJy5qcyc6ICdqc3gnLFxuLy8gICAgICAgICB9LFxuLy8gICAgICAgfSxcbi8vICAgICB9LFxuLy8gICAgIHBsdWdpbnM6IFtyZWFjdCgpXSxcbi8vICAgICByZXNvbHZlOiB7XG4vLyAgICAgICBhbGlhczogW1xuLy8gICAgICAgICB7XG4vLyAgICAgICAgICAgZmluZDogJ3NyYy8nLFxuLy8gICAgICAgICAgIHJlcGxhY2VtZW50OiBgJHtwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnc3JjJyl9L2AsXG4vLyAgICAgICAgIH0sXG4vLyAgICAgICBdLFxuLy8gICAgICAgZXh0ZW5zaW9uczogWycubWpzJywgJy5qcycsICcudHMnLCAnLmpzeCcsICcudHN4JywgJy5qc29uJywgJy5zY3NzJ10sXG4vLyAgICAgfSxcbi8vICAgICBzZXJ2ZXI6IHtcbi8vICAgICAgIHBvcnQ6IDMwMDAsXG4vLyAgICAgICBwcm94eToge1xuLy8gICAgICAgICAvLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL3NlcnZlci1vcHRpb25zLmh0bWxcbi8vICAgICAgIH0sXG4vLyAgICAgfSxcbi8vICAgfVxuLy8gfSlcblxuLy8gaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSdcbi8vIGltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCdcbi8vIGltcG9ydCBwYXRoIGZyb20gJ25vZGU6cGF0aCdcbi8vIGltcG9ydCBhdXRvcHJlZml4ZXIgZnJvbSAnYXV0b3ByZWZpeGVyJ1xuXG4vLyBleHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKCkgPT4ge1xuLy8gICByZXR1cm4ge1xuLy8gICAgIGJhc2U6ICcuLycsXG4vLyAgICAgYnVpbGQ6IHtcbi8vICAgICAgIG91dERpcjogJ2J1aWxkJyxcbi8vICAgICB9LFxuLy8gICAgIGNzczoge1xuLy8gICAgICAgcG9zdGNzczoge1xuLy8gICAgICAgICBwbHVnaW5zOiBbXG4vLyAgICAgICAgICAgYXV0b3ByZWZpeGVyKHt9KSwgLy8gYWRkIG9wdGlvbnMgaWYgbmVlZGVkXG4vLyAgICAgICAgIF0sXG4vLyAgICAgICB9LFxuLy8gICAgICAgcHJlcHJvY2Vzc29yT3B0aW9uczoge1xuLy8gICAgICAgICBzY3NzOiB7XG4vLyAgICAgICAgICAgcXVpZXREZXBzOiB0cnVlLFxuLy8gICAgICAgICAgIHNpbGVuY2VEZXByZWNhdGlvbnM6IFsnaW1wb3J0JywgJ2xlZ2FjeS1qcy1hcGknXSxcbi8vICAgICAgICAgfSxcbi8vICAgICAgIH0sXG4vLyAgICAgfSxcbi8vICAgICBlc2J1aWxkOiB7XG4vLyAgICAgICBsb2FkZXI6ICdqc3gnLFxuLy8gICAgICAgaW5jbHVkZTogL3NyY1xcLy4qXFwuanN4PyQvLFxuLy8gICAgICAgZXhjbHVkZTogW10sXG4vLyAgICAgfSxcbi8vICAgICBvcHRpbWl6ZURlcHM6IHtcbi8vICAgICAgIGZvcmNlOiB0cnVlLFxuLy8gICAgICAgZXNidWlsZE9wdGlvbnM6IHtcbi8vICAgICAgICAgbG9hZGVyOiB7XG4vLyAgICAgICAgICAgJy5qcyc6ICdqc3gnLFxuLy8gICAgICAgICB9LFxuLy8gICAgICAgfSxcbi8vICAgICB9LFxuLy8gICAgIHBsdWdpbnM6IFtyZWFjdCgpXSxcbi8vICAgICByZXNvbHZlOiB7XG4vLyAgICAgICBhbGlhczogW1xuLy8gICAgICAgICB7XG4vLyAgICAgICAgICAgZmluZDogJ3NyYy8nLFxuLy8gICAgICAgICAgIHJlcGxhY2VtZW50OiBgJHtwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnc3JjJyl9L2AsXG4vLyAgICAgICAgIH0sXG4vLyAgICAgICBdLFxuLy8gICAgICAgZXh0ZW5zaW9uczogWycubWpzJywgJy5qcycsICcudHMnLCAnLmpzeCcsICcudHN4JywgJy5qc29uJywgJy5zY3NzJ10sXG4vLyAgICAgfSxcbi8vICAgICAvLyBzZXJ2ZXI6IHtcbi8vICAgICAvLyAgIHBvcnQ6IDMwMDAsXG4vLyAgICAgLy8gICBwcm94eToge1xuLy8gICAgIC8vICAgICAvLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL3NlcnZlci1vcHRpb25zLmh0bWxcbi8vICAgICAvLyAgIH0sXG4vLyAgICAgLy8gfSxcbi8vICAgICBzZXJ2ZXI6IHtcbi8vICAgICAgIHBvcnQ6IDMwMDAsXG4vLyAgICAgICBob3N0OiAnMC4wLjAuMCcsIC8vIEFsbG93cyBhY2Nlc3MgZnJvbSBleHRlcm5hbCBzb3VyY2VzXG4vLyAgICAgICBzdHJpY3RQb3J0OiB0cnVlLCAvLyBFbnN1cmVzIHRoZSBzZXJ2ZXIgcnVucyBvbiB0aGUgc3BlY2lmaWVkIHBvcnRcbi8vICAgICAgIGNvcnM6IHtcbi8vICAgICAgICAgb3JpZ2luOiBbJ2h0dHA6Ly8zLjI2Ljk4Ljc1J10sIC8vIEFsbG93IHJlcXVlc3RzIGZyb20gdGhpcyBkb21haW5cbi8vICAgICAgICAgY3JlZGVudGlhbHM6IHRydWUsXG4vLyAgICAgICB9LFxuLy8gICAgICAgcHJveHk6IHt9LFxuLy8gICAgICAgYWxsb3dlZEhvc3RzOiBbXCIzLjI2Ljk4Ljc1XCJdLFxuLy8gICAgIH0sXG4vLyAgIH1cbi8vIH0pXG5cbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnXG5pbXBvcnQgcmVhY3QgZnJvbSAnQHZpdGVqcy9wbHVnaW4tcmVhY3QnXG5pbXBvcnQgcGF0aCBmcm9tICdub2RlOnBhdGgnXG5pbXBvcnQgYXV0b3ByZWZpeGVyIGZyb20gJ2F1dG9wcmVmaXhlcidcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBiYXNlOiAnL2FkbWluLycsICAvLyBJbXBvcnRhbnQgZm9yIGNvcnJlY3QgcGF0aCByZXNvbHV0aW9uXG4gICAgYnVpbGQ6IHtcbiAgICAgIG91dERpcjogJ2J1aWxkJyxcbiAgICB9LFxuICAgIGNzczoge1xuICAgICAgcG9zdGNzczoge1xuICAgICAgICBwbHVnaW5zOiBbYXV0b3ByZWZpeGVyKHt9KV0sXG4gICAgICB9LFxuICAgICAgcHJlcHJvY2Vzc29yT3B0aW9uczoge1xuICAgICAgICBzY3NzOiB7XG4gICAgICAgICAgcXVpZXREZXBzOiB0cnVlLFxuICAgICAgICAgIHNpbGVuY2VEZXByZWNhdGlvbnM6IFsnaW1wb3J0JywgJ2xlZ2FjeS1qcy1hcGknXSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBlc2J1aWxkOiB7XG4gICAgICBsb2FkZXI6ICdqc3gnLFxuICAgICAgaW5jbHVkZTogL3NyY1xcLy4qXFwuanN4PyQvLFxuICAgICAgZXhjbHVkZTogW10sXG4gICAgfSxcbiAgICBvcHRpbWl6ZURlcHM6IHtcbiAgICAgIGZvcmNlOiB0cnVlLFxuICAgICAgZXNidWlsZE9wdGlvbnM6IHtcbiAgICAgICAgbG9hZGVyOiB7XG4gICAgICAgICAgJy5qcyc6ICdqc3gnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIHBsdWdpbnM6IFtyZWFjdCgpXSxcbiAgICByZXNvbHZlOiB7XG4gICAgICBhbGlhczogW1xuICAgICAgICB7XG4gICAgICAgICAgZmluZDogJ3NyYy8nLFxuICAgICAgICAgIHJlcGxhY2VtZW50OiBgJHtwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnc3JjJyl9L2AsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgZXh0ZW5zaW9uczogWycubWpzJywgJy5qcycsICcudHMnLCAnLmpzeCcsICcudHN4JywgJy5qc29uJywgJy5zY3NzJ10sXG4gICAgfSxcbiAgICBzZXJ2ZXI6IHtcbiAgICAgIHBvcnQ6IDMwMDAsXG4gICAgICBob3N0OiAnMC4wLjAuMCcsIC8vIEFsbG93cyBleHRlcm5hbCBhY2Nlc3NcbiAgICAgIHN0cmljdFBvcnQ6IHRydWUsIC8vIEVuc3VyZXMgaXQgcnVucyBvbiBwb3J0IDMwMDBcbiAgICAgIGNvcnM6IHtcbiAgICAgICAgb3JpZ2luOiBbJ2h0dHBzOi8vdGVzdDEuM2RpbmcuaW4nXSwgLy8gVXNlIEhUVFBTXG4gICAgICAgIGNyZWRlbnRpYWxzOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHByb3h5OiB7fSxcbiAgICAgIGFsbG93ZWRIb3N0czogWyd0ZXN0MS4zZGluZy5pbiddLFxuICAgIH0sXG4gIH07XG59KTtcbiJdLAogICJtYXBwaW5ncyI6ICI7QUEySEEsU0FBUyxvQkFBb0I7QUFDN0IsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sVUFBVTtBQUNqQixPQUFPLGtCQUFrQjtBQTlIekIsSUFBTSxtQ0FBbUM7QUFnSXpDLElBQU8sc0JBQVEsYUFBYSxNQUFNO0FBQ2hDLFNBQU87QUFBQSxJQUNMLE1BQU07QUFBQTtBQUFBLElBQ04sT0FBTztBQUFBLE1BQ0wsUUFBUTtBQUFBLElBQ1Y7QUFBQSxJQUNBLEtBQUs7QUFBQSxNQUNILFNBQVM7QUFBQSxRQUNQLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQUEsTUFDNUI7QUFBQSxNQUNBLHFCQUFxQjtBQUFBLFFBQ25CLE1BQU07QUFBQSxVQUNKLFdBQVc7QUFBQSxVQUNYLHFCQUFxQixDQUFDLFVBQVUsZUFBZTtBQUFBLFFBQ2pEO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxJQUNBLFNBQVM7QUFBQSxNQUNQLFFBQVE7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULFNBQVMsQ0FBQztBQUFBLElBQ1o7QUFBQSxJQUNBLGNBQWM7QUFBQSxNQUNaLE9BQU87QUFBQSxNQUNQLGdCQUFnQjtBQUFBLFFBQ2QsUUFBUTtBQUFBLFVBQ04sT0FBTztBQUFBLFFBQ1Q7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLElBQ0EsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUFBLElBQ2pCLFNBQVM7QUFBQSxNQUNQLE9BQU87QUFBQSxRQUNMO0FBQUEsVUFDRSxNQUFNO0FBQUEsVUFDTixhQUFhLEdBQUcsS0FBSyxRQUFRLGtDQUFXLEtBQUssQ0FBQztBQUFBLFFBQ2hEO0FBQUEsTUFDRjtBQUFBLE1BQ0EsWUFBWSxDQUFDLFFBQVEsT0FBTyxPQUFPLFFBQVEsUUFBUSxTQUFTLE9BQU87QUFBQSxJQUNyRTtBQUFBLElBQ0EsUUFBUTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBO0FBQUEsTUFDTixZQUFZO0FBQUE7QUFBQSxNQUNaLE1BQU07QUFBQSxRQUNKLFFBQVEsQ0FBQyx3QkFBd0I7QUFBQTtBQUFBLFFBQ2pDLGFBQWE7QUFBQSxNQUNmO0FBQUEsTUFDQSxPQUFPLENBQUM7QUFBQSxNQUNSLGNBQWMsQ0FBQyxnQkFBZ0I7QUFBQSxJQUNqQztBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
